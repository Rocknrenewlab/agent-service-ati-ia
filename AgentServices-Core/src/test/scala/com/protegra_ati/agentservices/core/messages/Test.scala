package com.protegra_ati.agentservices.core.messages

import java.io.IOException
import java.util.Date
import org.apache.commons.codec.binary.Base64;

object Test
{
  val AVATAR_IMAGE_BYTE_REPRESENTATION = List[ Byte ](-1, -40, -1, -32, 0, 16, 74, 70, 73, 70, 0, 1, 1, 1, 0, 96, 0, 96, 0, 0, -1, -31, 0, 104, 69, 120, 105,
    102, 0, 0, 77, 77, 0, 42, 0, 0, 0, 8, 0, 4, 1, 26, 0, 5, 0, 0, 0, 1, 0, 0, 0, 62, 1, 27, 0, 5, 0, 0, 0,
    1, 0, 0, 0, 70, 1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 49, 0, 2, 0, 0, 0, 17, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 1, 0, 0, 0, 96, 0, 0, 0, 1, 80,
//    -94, 46, -26, 58, -58, -103, 115, 111, 115, 5, -4, -52, 119, 59, -17, -128, -108, 61, 64, 3, 36, -123, 10, 50, 113, -102, -12, 122, -2, 30, 63, 102, 95, -8,
//    1, 0, 0, 0, 70, 1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 49, 0, 2, 0, 0, 0, 17, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 1, 0, 0, 0, 96, 0, 0, 0, 1, 80,
//    -94, 46, -26, 58, -58, -103, 115, 111, 115, 5, -4, -52, 119, 59, -17, -128, -108, 61, 64, 3, 36, -123, 10, 50, 113, -102, -12, 122, -2, 30, 63, 102, 95, -8,
//    1, 0, 0, 0, 70, 1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 49, 0, 2, 0, 0, 0, 17, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 1, 0, 0, 0, 96, 0, 0, 0, 1, 80,
//    -94, 46, -26, 58, -58, -103, 115, 111, 115, 5, -4, -52, 119, 59, -17, -128, -108, 61, 64, 3, 36, -123, 10, 50, 113, -102, -12, 122, -2, 30, 63, 102, 95, -8,
//    -94, 46, -26, 58, -58, -103, 115, 111, 115, 5, -4, -52, 119, 59, -17, -128, -108, 61, 64, 3, 36, -123, 10, 50, 113, -102, -12, 122, -2, 30, 63, 102, 95, -8,
//    1, 0, 0, 0, 70, 1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 49, 0, 2, 0, 0, 0, 17, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 1, 0, 0, 0, 96, 0, 0, 0, 1, 80,
//    -94, 46, -26, 58, -58, -103, 115, 111, 115, 5, -4, -52, 119, 59, -17, -128, -108, 61, 64, 3, 36, -123, 10, 50, 113, -102, -12, 122, -2, 30, 63, 102, 95, -8,
//    1, 0, 0, 0, 70, 1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 49, 0, 2, 0, 0, 0, 17, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 1, 0, 0, 0, 96, 0, 0, 0, 1, 80,
//    -94, 46, -26, 58, -58, -103, 115, 111, 115, 5, -4, -52, 119, 59, -17, -128, -108, 61, 64, 3, 36, -123, 10, 50, 113, -102, -12, 122, -2, 30, 63, 102, 95, -8,
//
//    1, 0, 0, 0, 70, 1, 40, 0, 3, 0, 0, 0, 1, 0, 2, 0, 0, 1, 49, 0, 2, 0, 0, 0, 17, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 1, 0, 0, 0, 96, 0, 0, 0, 1, 80,
//    -94, 46, -26, 58, -58, -103, 115, 111, 115, 5, -4, -52, 119, 59, -17, -128, -108, 61, 64, 3, 36, -123, 10, 50, 113, -102, -12, 122, -2, 30, 63, 102, 95, -8,
//    40, 55, -59, -1, 0, -40, -97, -30, 40, -15, 15, -62, 127, 30, 107, -66, 13, -69, 18, -125, 52, 54, -109, -121, -76, -67, 10, -63, -79, 60, 7, 48, 76, -71, 3,
//    33, -108, -125, -114, -107, -6, -17, -5, 11, -1, 0, -63, -24, -38, -74, -113, 29, -106, -115, -5, 65, -4, 62, -121, 89, -116, -78, -92, -98, 35, -16, -95, 22,
    -9, 8, -71, 57, 50, 89, -56, 118, 72, -36, -116, 121, 114, 70, 6, 58, 28, -26, -66, -86, 48, 81, -75, 56, 116, 62, 26, 82, -108, -65, 121, 62, -89, -1, -39).toArray[ Byte ]


  def main(arg: Array[ String ]) =
  {
    approach2()

  }

  def approach1() =
  {
    val start: Date = new Date()

    try {
      // Convert a byte array to base64 string
      val initialByteArray = AVATAR_IMAGE_BYTE_REPRESENTATION

      val s: String = new sun.misc.BASE64Encoder().encode(initialByteArray);

      // Convert base64 string to a byte array
      val res1 = new sun.misc.BASE64Decoder().decodeBuffer(s);

      val end: Date = new Date()
      System.err.println("first approach: " + ( end.getTime - start.getTime ))
    } catch {
      case ex: Exception => {
        ex.printStackTrace()
      }

    }

  }

  def approach2() =
  {
    val start: Date = new Date()
    val initialByteArray = AVATAR_IMAGE_BYTE_REPRESENTATION
    try {
      val encoded = new String(Base64.encodeBase64(initialByteArray));

      val res1 = Base64.decodeBase64(encoded.getBytes());
      if ( !initialByteArray.sameElements(res1) ) {
        throw new IOException("sun.misc.BASE64Decoder approach doesn't work")
      }
      val end: Date = new Date()
      System.err.println("second approach: " + ( end.getTime - start.getTime ))
    } catch {
      case ex: Exception => {
        ex.printStackTrace()
      }

    }

  }

}


